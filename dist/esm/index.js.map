{
  "version": 3,
  "sources": ["../../src/Whiteboard.ts"],
  "sourcesContent": ["interface WhiteboardParameters {\n  container: HTMLElement;\n  baseUrl: string;\n  boardId: string;\n  userToken: string;\n}\n\ninterface Whiteboard {\n  updateUserToken(userToken: string): void;\n  dispose(): void;\n}\n\nexport function createWhiteboard(\n  parameters: WhiteboardParameters\n): Promise<Whiteboard> {\n  const iframe: HTMLIFrameElement = document.createElement(\"iframe\");\n  iframe.sandbox.add(\"allow-same-origin\");\n  iframe.sandbox.add(\"allow-scripts\");\n  iframe.src = `${parameters.baseUrl}/boards/${encodeURIComponent(\n    parameters.boardId\n  )}`;\n\n  const whiteboard = {\n    updateUserToken: (userToken: string) => {\n      iframe.contentWindow?.postMessage(\n        {\n          type: \"updateUserToken\",\n          userToken: userToken,\n        },\n        \"*\"\n      );\n    },\n    dispose: () => {\n      if (iframe) {\n        parameters.container.removeChild(iframe);\n      }\n    },\n  };\n\n  parameters.container.appendChild(iframe);\n\n  return new Promise<Whiteboard>((resolve, reject) => {\n    function loadHandler() {\n      setupKeyboardEventTunnel(parameters.container, iframe);\n      iframe.removeEventListener(\"load\", loadHandler);\n      resolve(whiteboard);\n    }\n\n    iframe.addEventListener(\"load\", loadHandler);\n  });\n}\n\nexport class WhiteboardLoader {\n  async render(parameters: WhiteboardParameters): Promise<Whiteboard> {\n    return createWhiteboard(parameters);\n  }\n}\n\nfunction setupKeyboardEventTunnel(\n  container: HTMLElement,\n  iframe: HTMLIFrameElement\n): void {\n  function keyboardEventHandler(event: KeyboardEvent) {\n    iframe.contentWindow?.postMessage(serializeKeyboardEvent(event), \"*\");\n  }\n\n  document.addEventListener(\"keydown\", keyboardEventHandler);\n  document.addEventListener(\"keyup\", keyboardEventHandler);\n\n  window.addEventListener(\"message\", (event: MessageEvent) => {\n    if (\n      event.source === iframe.contentWindow &&\n      event.data?.type === \"keyboardEvent\"\n    ) {\n      const keyboardEvent = new KeyboardEvent(\n        event.data.eventType,\n        event.data.eventData\n      );\n      container.dispatchEvent(keyboardEvent);\n    }\n  });\n}\n\nfunction serializeKeyboardEvent(event: KeyboardEvent) {\n  return {\n    type: \"keyboardEvent\",\n    eventType: event.type,\n    eventData: {\n      key: event.key,\n      code: event.code,\n      ctrlKey: event.ctrlKey,\n      shiftKey: event.shiftKey,\n      altKey: event.altKey,\n      metaKey: event.metaKey,\n      repeat: event.repeat,\n    },\n  };\n}\n"],
  "mappings": "6MAYO,SAASA,EACdC,EACqB,CACrB,IAAMC,EAA4B,SAAS,cAAc,QAAQ,EACjEA,EAAO,QAAQ,IAAI,mBAAmB,EACtCA,EAAO,QAAQ,IAAI,eAAe,EAClCA,EAAO,IAAM,GAAGD,EAAW,OAAO,WAAW,mBAC3CA,EAAW,OACb,CAAC,GAED,IAAME,EAAa,CACjB,gBAAkBC,GAAsB,CAvB5C,IAAAC,GAwBMA,EAAAH,EAAO,gBAAP,MAAAG,EAAsB,YACpB,CACE,KAAM,kBACN,UAAWD,CACb,EACA,IAEJ,EACA,QAAS,IAAM,CACTF,GACFD,EAAW,UAAU,YAAYC,CAAM,CAE3C,CACF,EAEA,OAAAD,EAAW,UAAU,YAAYC,CAAM,EAEhC,IAAI,QAAoB,CAACI,EAASC,IAAW,CAClD,SAASC,GAAc,CACrBC,EAAyBR,EAAW,UAAWC,CAAM,EACrDA,EAAO,oBAAoB,OAAQM,CAAW,EAC9CF,EAAQH,CAAU,CACpB,CAEAD,EAAO,iBAAiB,OAAQM,CAAW,CAC7C,CAAC,CACH,CAEO,IAAME,EAAN,KAAuB,CACtB,OAAOT,EAAuD,QAAAU,EAAA,sBAClE,OAAOX,EAAiBC,CAAU,CACpC,GACF,EAEA,SAASQ,EACPG,EACAV,EACM,CACN,SAASW,EAAqBC,EAAsB,CA9DtD,IAAAT,GA+DIA,EAAAH,EAAO,gBAAP,MAAAG,EAAsB,YAAYU,EAAuBD,CAAK,EAAG,IACnE,CAEA,SAAS,iBAAiB,UAAWD,CAAoB,EACzD,SAAS,iBAAiB,QAASA,CAAoB,EAEvD,OAAO,iBAAiB,UAAYC,GAAwB,CArE9D,IAAAT,EAsEI,GACES,EAAM,SAAWZ,EAAO,iBACxBG,EAAAS,EAAM,OAAN,YAAAT,EAAY,QAAS,gBACrB,CACA,IAAMW,EAAgB,IAAI,cACxBF,EAAM,KAAK,UACXA,EAAM,KAAK,SACb,EACAF,EAAU,cAAcI,CAAa,CACvC,CACF,CAAC,CACH,CAEA,SAASD,EAAuBD,EAAsB,CACpD,MAAO,CACL,KAAM,gBACN,UAAWA,EAAM,KACjB,UAAW,CACT,IAAKA,EAAM,IACX,KAAMA,EAAM,KACZ,QAASA,EAAM,QACf,SAAUA,EAAM,SAChB,OAAQA,EAAM,OACd,QAASA,EAAM,QACf,OAAQA,EAAM,MAChB,CACF,CACF",
  "names": ["createWhiteboard", "parameters", "iframe", "whiteboard", "userToken", "_a", "resolve", "reject", "loadHandler", "setupKeyboardEventTunnel", "WhiteboardLoader", "__async", "container", "keyboardEventHandler", "event", "serializeKeyboardEvent", "keyboardEvent"]
}
