openapi: 3.0.0
info:
  title: Online Board Application
  version: 1.0.0
servers:
  - url: https://alpha.microboard.io/api/v1
    description: Online Board Application REST API
paths:
  /boards:
    post:
      summary: Create a board
      operationId: createBoard
      tags:
        - Board
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  nullable: true
                catalogId:
                  type: string
                  format: uuid
                  nullable: true
      responses:
        "201":
          description: Board created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  boardId:
                    type: string
                    format: uuid
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      security:
        - BearerAuth: []
    delete:
      summary: Delete a board by ID
      operationId: deleteBoard
      tags:
        - Board
      parameters:
        - name: boardId
          in: query
          required: true
          schema:
            type: string
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                catalogId:
                  type: string
                  format: uuid
                  nullable: true
      responses:
        "204":
          description: Board deleted successfully
        "400":
          description: Invalid board ID
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Board not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      security:
        - BearerAuth: []
  /boards/{boardId}/duplicate:
    post:
      summary: Duplicate a board
      operationId: duplicateBoard
      tags:
        - Board
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                catalogId:
                  type: string
                  format: uuid
                  nullable: true
                title:
                  type: string
                  nullable: true
      parameters:
        - name: boardId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Board duplicated successfully
        "400":
          description: Invalid board ID
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Board not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      security:
        - BearerAuth: []
  /boards/{boardId}/events:
    post:
      summary: Add an event to a board
      operationId: addBoardEvent
      tags:
        - Board
      parameters:
        - name: boardId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                eventId:
                  type: string
                eventBody:
                  type: object
              required:
                - eventId
                - eventBody
      responses:
        "201":
          description: Event added to the board successfully
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Board not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      security:
        - BearerAuth: []
    get:
      summary: Retrieve board events
      operationId: getBoardEvents
      tags:
        - Board
      parameters:
        - name: boardId
          in: path
          required: true
          schema:
            type: string
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
            required: false
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
            required: false
      responses:
        "200":
          description: Board events retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  events:
                    type: array
                    items:
                      type: object
                      properties:
                        eventType:
                          type: string
                        details:
                          type: object
                        timestamp:
                          type: string
                          format: date-time
                  pagination:
                    $ref: "#/components/schemas/Pagination"
        "400":
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Board not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      security:
        - BearerAuth: []
  /boards/{boardId}:
    patch:
      summary: Rename a board
      operationId: renameBoard
      tags:
        - Board
      parameters:
        - name: boardId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                newTitle:
                  type: string
              required:
                - newTitle
      responses:
        "200":
          description: Board renamed successfully
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Board not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      security:
        - BearerAuth: []
  /boards/{boardId}/links:
    post:
      tags:
        - Link
      summary: Create link to a board for reading or editing
      parameters:
        - name: boardId
          in: path
          required: true
          description: ID of the board
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                type:
                  type: string
                  enum:
                    - read
                    - edit
                  description: Type of the link to be created
              required:
                - type
      responses:
        "201":
          description: The link is successfully created
          content:
            application/json:
              schema:
                type: object
                properties:
                  linkId:
                    type: string
                    format: uuid
                    description: Unique identifier of the created link
                  linkUri:
                    type: string
                    format: uri
                    description: URI of the created link
                required:
                  - linkId
                  - linkUri
        default:
          description: Error
      security:
        - BearerAuth: []
    delete:
      tags:
        - Link
      summary: Remove link to a board
      parameters:
        - name: boardId
          in: path
          required: true
          schema:
            type: string
        - name: linkId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Link successfully removed
        default:
          description: Error
      security:
        - BearerAuth: []
  /boards/{boardId}/access:
    post:
      tags:
        - Access
      summary: Grant access to read or edit a board
      parameters:
        - name: boardId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                  description: User ID
                accessType:
                  type: string
                  enum:
                    - read
                    - edit
                  description: "Type of access: read or edit"
              required:
                - userId
                - accessType
      responses:
        "201":
          description: Access succesfully granted
        default:
          description: Error
      security:
        - BearerAuth: []
    delete:
      tags:
        - Access
      summary: Revoke access to read or edit a board
      parameters:
        - name: boardId
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Access successfully revoked
        default:
          description: Error
      security:
        - BearerAuth: []
  /boards/{boardId}/owners:
    post:
      tags:
        - Access
      summary: Add board owner
      parameters:
        - name: boardId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                  description: User ID
              required:
                - userId
      responses:
        "201":
          description: Owner successfully added
        default:
          description: Error
      security:
        - BearerAuth: []
    delete:
      tags:
        - Access
      summary: Remove board owner
      parameters:
        - name: boardId
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Owner successfully removed
        default:
          description: Error
      security:
        - BearerAuth: []
  /auth/register:
    post:
      summary: Register a new user with various credentials
      operationId: registerUser
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  nullable: true
                password:
                  type: string
                  format: password
                  nullable: true
                username:
                  type: string
                  nullable: true
                phone:
                  type: string
                  pattern: ^[+]*[(]{0,1}[0-9]{1,4}[)]{0,1}[-\s\./0-9]*$
                  nullable: true
              oneOf:
                - required:
                    - email
                    - password
                - required:
                    - username
                    - password
                - required:
                    - email
                  description: Register with email only, passcode will be sent
                - required:
                    - phone
                  description: Register with phone number only, passcode will be sent
      responses:
        "201":
          description: User registration successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: A message indicating the success of the operation.
                  userType:
                    type: string
                    enum:
                      - passwordUser
                      - passcodeUser
                    description: >-
                      Indicates whether the user was registered with a password
                      (passwordUser) or if a passcode was sent (passcodeUser).
        "400":
          description: Invalid input data
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        field:
                          type: string
                          description: The field in the request that contains the error.
                        message:
                          type: string
                          description: >-
                            A detailed message explaining why the input is
                            invalid.
                        errorCode:
                          type: string
                          description: >-
                            An application-specific error code representing the
                            type of validation error.
                      required:
                        - field
                        - message
                        - errorCode
                    description: >-
                      A list of errors describing what is invalid in the input
                      data.
        "409":
          description: User with provided credential already exists
  /auth/resend-passcode:
    post:
      summary: Resend passcode
      operationId: resendUserPasscode
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                phoneNumber:
                  type: string
                  pattern: ^[+][0-9]{10,15}$
                  description: Phone number in international format
              oneOf:
                - required:
                    - email
                - required:
                    - phoneNumber
      responses:
        "200":
          description: Passcode resent successfully
        "400":
          description: Invalid email format
        "404":
          description: User not found
  /auth/login:
    post:
      summary: >-
        Authenticate user with email, phone, or username and password or
        passcode
      operationId: loginUserMultiMethod
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  nullable: true
                phone:
                  type: string
                  pattern: ^\+[1-9]\d{1,14}$
                  nullable: true
                username:
                  type: string
                  nullable: true
                password:
                  type: string
                  format: password
                  nullable: true
                passcode:
                  type: string
                  nullable: true
              oneOf:
                - required:
                    - email
                    - password
                - required:
                    - phone
                    - password
                - required:
                    - username
                    - password
                - required:
                    - email
                    - passcode
                - required:
                    - phone
                    - passcode
      responses:
        "200":
          description: User authenticated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthTokens"
        "401":
          description: Authentication failed
  /auth/me:
    get:
      summary: Get current user details
      tags:
        - Auth
      responses:
        "200":
          description: User details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          description: Unauthorized - Invalid or expired JWT token
      security:
        - BearerAuth: []
  /auth/refresh:
    post:
      tags:
        - Auth
      summary: Refresh JWT token
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                refreshToken:
                  type: string
                  description: Refresh token
              required:
                - refreshToken
      responses:
        "200":
          description: New JWT tokens
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                    description: New access token
                  refreshToken:
                    type: string
                    description: New refresh token
        "401":
          description: Invalid or expired refresh token
  /users:
    post:
      summary: Create a new user
      operationId: createUser
      tags:
        - User
      requestBody:
        description: User creation data
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
                  format: password
                email:
                  type: string
                  format: email
              required:
                - username
                - password
                - email
      responses:
        "201":
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  username:
                    type: string
                  avatar:
                    type: string
                    format: uri
                    nullable: true
                  jwt:
                    type: string
        "400":
          description: Invalid input data
        "409":
          description: User already exists
  /users/{userId}:
    delete:
      summary: Delete a user
      operationId: deleteUser
      tags:
        - User
      parameters:
        - name: userId
          in: path
          required: true
          description: The ID of the user to delete
          schema:
            type: string
      responses:
        "200":
          description: User deleted successfully
        "401":
          description: Unauthorized - Invalid or expired JWT token
        "404":
          description: User not found
    patch:
      summary: Update user details, including setting a new password
      operationId: updateUserDetails
      tags:
        - User
      parameters:
        - name: userId
          in: path
          required: true
          description: The ID of the user to set/update the password for
          schema:
            type: string
      requestBody:
        description: User update data, including new password
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  nullable: true
                avatar:
                  type: string
                  format: uri
                  nullable: true
                newPassword:
                  type: string
                  format: password
                  nullable: true
                confirmPassword:
                  type: string
                  format: password
                  nullable: true
      responses:
        "200":
          description: User updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  username:
                    type: string
                  avatar:
                    type: string
                    format: uri
                    nullable: true
        "400":
          description: Invalid input data or passwords do not match
        "401":
          description: Unauthorized - Invalid or expired JWT token
        "404":
          description: User not found
      security:
        - BearerAuth: []
  /groups:
    post:
      tags:
        - Group
      summary: Create a new user group
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
              required:
                - name
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Group"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
  /groups/{groupId}:
    delete:
      summary: Delete a user group
      tags:
        - Group
      parameters:
        - name: groupId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: No Content
        "401":
          $ref: "#/components/responses/UnauthorizedError"
    get:
      summary: List users in the group
      tags:
        - Group
      parameters:
        - name: groupId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
    patch:
      summary: Update a group's description
      tags:
        - Group
      parameters:
        - name: groupId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                description:
                  type: string
              required:
                - description
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Group"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
  /groups/{groupId}/users:
    post:
      summary: Add a user to a group
      tags:
        - Group
      parameters:
        - name: groupId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                  format: uuid
              required:
                - userId
      responses:
        "204":
          description: No Content
        "401":
          $ref: "#/components/responses/UnauthorizedError"
    delete:
      summary: Remove a user from a group
      tags:
        - Group
      parameters:
        - name: groupId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: userId
          in: query
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: No Content
        "401":
          $ref: "#/components/responses/UnauthorizedError"
  /catalogs:
    post:
      summary: Create a new catalog
      operationId: createCatalog
      tags:
        - Catalog
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Catalog"
      responses:
        "201":
          description: Catalog created
        "400":
          description: Invalid input
        "401":
          $ref: "#/components/responses/UnauthorizedError"
      security:
        - BearerAuth: []
  /catalogs/{catalogId}:
    delete:
      summary: Delete a catalog
      operationId: deleteCatalog
      tags:
        - Catalog
      parameters:
        - $ref: "#/components/parameters/catalogId"
      responses:
        "204":
          description: Catalog deleted
        "401":
          $ref: "#/components/responses/UnauthorizedError"
      security:
        - BearerAuth: []
    patch:
      summary: Rename a catalog
      operationId: renameCatalog
      tags:
        - Catalog
      parameters:
        - $ref: "#/components/parameters/catalogId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                newName:
                  type: string
              required:
                - newName
      responses:
        "200":
          description: Catalog renamed
        "400":
          description: Invalid input
        "401":
          $ref: "#/components/responses/UnauthorizedError"
      security:
        - BearerAuth: []
  /catalogs/{catalogId}/elements:
    get:
      summary: List elements in a catalog
      operationId: listCatalogElements
      tags:
        - Catalog
      parameters:
        - $ref: "#/components/parameters/catalogId"
      responses:
        "200":
          description: List of catalog elements
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Element"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
      security:
        - BearerAuth: []
    post:
      summary: Add an element to a catalog
      operationId: addElementToCatalog
      tags:
        - Catalog
      parameters:
        - $ref: "#/components/parameters/catalogId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Element"
      responses:
        "201":
          description: Catalog element added
        "400":
          description: Invalid input
        "401":
          $ref: "#/components/responses/UnauthorizedError"
      security:
        - BearerAuth: []
  /catalogs/{catalogId}/elements/{elementId}:
    delete:
      summary: Delete an element from a catalog
      operationId: deleteElementFromCatalog
      tags:
        - Catalog
      parameters:
        - $ref: "#/components/parameters/catalogId"
        - $ref: "#/components/parameters/elementId"
      responses:
        "204":
          description: Catalog element deleted
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
      security:
        - BearerAuth: []
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  parameters:
    catalogId:
      name: catalogId
      in: path
      required: true
      schema:
        type: string
        format: uuid
    elementId:
      name: elementId
      in: path
      required: true
      description: Unique identifier of the element in the format of a UUID
      schema:
        type: string
        format: uuid
  responses:
    UnauthorizedError:
      description: Access token is missing or invalid
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        username:
          type: string
      required:
        - id
        - username
    Group:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
      required:
        - id
        - name
    Catalog:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
      required:
        - id
        - name
    Element:
      type: object
      properties:
        id:
          type: string
          format: uuid
        type:
          type: string
          enum:
            - catalog
            - board
        name:
          type: string
      required:
        - id
        - type
        - name
    Pagination:
      type: object
      properties:
        page:
          type: integer
          minimum: 1
          example: 1
        limit:
          type: integer
          minimum: 1
          maximum: 100
          example: 10
        totalPages:
          type: integer
          example: 5
        totalItems:
          type: integer
          example: 50
    ErrorResponse:
      type: object
      properties:
        code:
          type: integer
        message:
          type: string
    AccessToken:
      type: object
      properties:
        sub:
          type: string
          description: Subject - usually a user identifier.
        exp:
          type: integer
          format: int64
          description: Expiration time - the Unix time after which this token is considered invalid.
        iat:
          type: integer
          format: int64
          description: Issued at time - the Unix time when this token was issued.
        jti:
          type: string
          description: JWT ID - a unique identifier for this token.
        iss:
          type: string
          description: Issuer - the service or entity that issued this token.
        aud:
          type: string
          description: Audience - the recipients that this token is intended for.
        nbf:
          type: integer
          format: int64
          description: Not before time - the Unix time before which this token should not be accepted.
          nullable: true
        owns:
          type: object
          nullable: true
          properties:
            boards:
              type: array
              items:
                type: string
                format: uuid
            catalogs:
              type: array
              items:
                type: string
                format: uuid
            groups:
              type: array
              items:
                type: string
                format: uuid
        edits:
          type: object
          nullable: true
          properties:
            boards:
              type: array
              items:
                type: string
                format: uuid
            catalogs:
              type: array
              items:
                type: string
                format: uuid
            groups:
              type: array
              items:
                type: string
                format: uuid
        reads:
          type: object
          nullable: true
          properties:
            boards:
              type: array
              items:
                type: string
                format: uuid
            catalogs:
              type: array
              items:
                type: string
                format: uuid
            groups:
              type: array
              items:
                type: string
                format: uuid
        displayName:
          type: string
          nullable: true
          description: The display name of the user.
        avatar:
          type: string
          format: uri
          nullable: true
          description: The URL to the user's avatar image.
      required:
        - sub
        - exp
        - iat
        - jti
        - iss
        - aud
    RefreshToken:
      type: object
      required:
        - sub
        - exp
        - iat
        - jti
        - iss
        - aud
      properties:
        sub:
          type: string
          description: Subject - the user ID associated with this token.
        exp:
          type: integer
          description: Expiration time - the time after which the token expires.
        iat:
          type: integer
          description: Issued at time - the time at which the token was issued.
        jti:
          type: string
          description: JWT ID - a unique identifier for the token.
        iss:
          type: string
          description: Issuer - the service that issued the token.
        aud:
          type: string
          description: Audience - the intended recipients of the token.
        nbf:
          type: integer
          description: Not before time - the token should not be accepted before this time.
    AuthTokens:
      type: object
      properties:
        accessToken:
          $ref: "#/components/schemas/AccessToken"
        refreshToken:
          $ref: "#/components/schemas/RefreshToken"
      required:
        - accessToken
        - refreshToken
